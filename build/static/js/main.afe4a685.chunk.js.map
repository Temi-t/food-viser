{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","cholesterol","className","style","recipe","foodHead","map","ingredient","i","key","text","src","alt","chol","toFixed","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","getRecipes","a","fetch","response","json","data","hits","console","log","useEffect","onSubmit","e","preventDefault","type","value","onChange","target","placeholder","label","totalDaily","CHOLE","quantity","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,SAAW,yBAAyB,KAAO,uB,6MCsB9EC,MAlBf,YAAsE,IAApDC,EAAmD,EAAnDA,MAAOC,EAA4C,EAA5CA,SAAUC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,YACnD,OACI,yBAAKC,UAAWC,IAAMC,QAClB,wBAAIF,UAAWC,IAAME,UAAWR,GAChC,+CACA,4BACKG,EAAYM,KAAI,SAACC,EAAYC,GAC1B,OAAO,wBAAIC,IAAK,cAAcD,GAAID,EAAWG,UAGrD,yBAAKC,IAAKZ,EAAOa,IAAKb,EAAMF,QAC5B,uBAAGK,UAAWC,IAAMU,MAApB,oBAA6Cf,EAASgB,QAAQ,IAC9D,uBAAGZ,UAAWC,IAAMU,MAAQZ,EAAYa,QAAQ,GAAhD,4C,MC2DGC,MAxEf,WAEE,IAFa,EAOiBC,mBAAS,IAP1B,mBAONC,EAPM,KAOGC,EAPH,OAQeF,mBAAS,IARxB,mBAQNG,EARM,KAQEC,EARF,OASaJ,mBAAS,WATtB,mBASNK,EATM,KASCC,EATD,KAaPC,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAqCJ,EAArC,mBAZf,WAYe,oBAXd,qCAUG,cACXK,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBV,EAAWU,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJA,2CAAH,qDA2BhB,OAnBAG,qBAAU,WAERT,MAAe,CAACF,IAkBhB,yBAAKnB,UAAU,OACb,wBAAIA,UAAU,SAAd,yBACA,uBAAGA,UAAW,SAAd,yFACA,0BAAMA,UAAU,cAAc+B,SAbhB,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,MAWN,2BAAOlB,UAAU,aAAakC,KAAK,OAAOC,MAAQlB,EAAQmB,SAlB3C,SAAAJ,GACnBd,EAAUc,EAAEK,OAAOF,QAiBmEG,YAAY,kCAC9F,4BACCJ,KAAK,SACLlC,UAAU,iBACN,+BACA,+BACA,+BACA,+BANL,WAUF,yBAAKA,UAAU,WACde,EAAQX,KAAI,SAACF,GAAD,OACX,kBAAC,EAAD,CACAK,IAAKL,EAAOA,OAAOqC,MACnB5C,MAAOO,EAAOA,OAAOqC,MACrB3C,SAAUM,EAAOA,OAAON,SACxBC,MAAOK,EAAOA,OAAOL,MACrBC,YAAaI,EAAOA,OAAOJ,YAC3BC,YAAaG,EAAOA,OAAOsC,WAAWC,MAAMC,iBCxDhCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.afe4a685.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\",\"foodHead\":\"recipe_foodHead__3dBNw\",\"chol\":\"recipe_chol__2n0qu\"};","import React from 'react';\nimport style from './recipe.module.css';\n\n\n\nfunction Recipe ({title, calories, image, ingredients, cholesterol }){\n    return(\n        <div className={style.recipe}>\n            <h1 className={style.foodHead}>{title}</h1>\n            <strong>Ingredients</strong>\n            <ul>\n                {ingredients.map((ingredient, i)=>{\n                    return <li key={'ingredient_'+i}>{ingredient.text}</li>\n                })}\n            </ul>\n            <img src={image} alt={image.title}  />\n            <p className={style.chol} >Calory estimate: {calories.toFixed(2)}</p>\n            <p className={style.chol} >{cholesterol.toFixed(2)}% of your daily cholesterol(300mg/day)</p>\n        </div>\n    );\n};\n\n\nexport default Recipe;","import React, { useEffect, useState } from 'react';\nimport Recipe from './Recipe';\nimport './App.css';\n\nfunction App() {\n\n  const APP_ID = 'e63e0510';\n  const APP_KEY = '2c1330f7fd979365d424fe2ae1d7612f';\n \n\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('pudding');\n \n\n\n  const getRecipes = async () =>{\n    const response = await fetch( `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`)\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  };\n  \n\n  useEffect(()=>{\n    // eslint-disable-next-line\n    getRecipes()}, [query]\n  );\n\n\n  const updateSearch = e =>{\n    setSearch(e.target.value);\n  };\n\n  const getSearch = e =>{\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n\n\n\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Welcome to Food-Viser</h1>\n      <p className= 'intro'>Your number-one-food-adviser is here to guide your daily-diet and recipe üçú</p>\n      <form className='search-form' onSubmit={getSearch}>\n        <input className='search-bar' type='text' value= {search} onChange={updateSearch} placeholder=\"  e.g. Hamburger üçî\" />\n        <button\n         type='submit' \n         className='search-button'>\n             <span></span>\n             <span></span>\n             <span></span>\n             <span></span>\n          Search\n        </button>\n      </form>\n      <div className='recipes'>\n      {recipes.map((recipe)=>(\n        <Recipe \n        key={recipe.recipe.label} \n        title={recipe.recipe.label} \n        calories={recipe.recipe.calories}\n        image={recipe.recipe.image} \n        ingredients={recipe.recipe.ingredients}\n        cholesterol={recipe.recipe.totalDaily.CHOLE.quantity}\n        />\n      ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}